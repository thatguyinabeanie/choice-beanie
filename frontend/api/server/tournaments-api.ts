/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Tournament } from "../model";
// @ts-ignore
import type { TournamentDetails } from "../model";
// @ts-ignore
import type { TournamentPostRequest } from "../model";
// @ts-ignore
import type { TournamentRequest } from "../model";
/**
 * TournamentsApi - axios parameter creator
 * @export
 */
export const TournamentsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes a Tournament.
     * @summary Delete Tournament
     * @param {number} id ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournament: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTournament", "id", id);
      const localVarPath = `/api/v1/tournaments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a specific Tournament.
     * @summary Show Tournament
     * @param {number} id ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTournament: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTournament", "id", id);
      const localVarPath = `/api/v1/tournaments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all Tournaments
     * @summary List Organization Tournaments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournaments: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tournaments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {TournamentPostRequest} [tournamentPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournament: async (
      tournamentPostRequest?: TournamentPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tournaments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tournamentPostRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a Tournament.
     * @summary Update Tournament
     * @param {number} id ID of the Tournament
     * @param {TournamentRequest} [tournamentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournament: async (
      id: number,
      tournamentRequest?: TournamentRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putTournament", "id", id);
      const localVarPath = `/api/v1/tournaments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tournamentRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TournamentsApi - functional programming interface
 * @export
 */
export const TournamentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TournamentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes a Tournament.
     * @summary Delete Tournament
     * @param {number} id ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTournament(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTournament(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.deleteTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a specific Tournament.
     * @summary Show Tournament
     * @param {number} id ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTournament(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTournament(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.getTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all Tournaments
     * @summary List Organization Tournaments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTournaments(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Tournament>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listTournaments(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.listTournaments"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {TournamentPostRequest} [tournamentPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTournament(
      tournamentPostRequest?: TournamentPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postTournament(
        tournamentPostRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.postTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a Tournament.
     * @summary Update Tournament
     * @param {number} id ID of the Tournament
     * @param {TournamentRequest} [tournamentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTournament(
      id: number,
      tournamentRequest?: TournamentRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putTournament(
        id,
        tournamentRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.putTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TournamentsApi - factory interface
 * @export
 */
export const TournamentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TournamentsApiFp(configuration);
  return {
    /**
     * Deletes a Tournament.
     * @summary Delete Tournament
     * @param {TournamentsApiDeleteTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournament(
      requestParameters: TournamentsApiDeleteTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTournament(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a specific Tournament.
     * @summary Show Tournament
     * @param {TournamentsApiGetTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTournament(
      requestParameters: TournamentsApiGetTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TournamentDetails> {
      return localVarFp
        .getTournament(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all Tournaments
     * @summary List Organization Tournaments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournaments(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Tournament>> {
      return localVarFp
        .listTournaments(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {TournamentsApiPostTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournament(
      requestParameters: TournamentsApiPostTournamentRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TournamentDetails> {
      return localVarFp
        .postTournament(requestParameters.tournamentPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a Tournament.
     * @summary Update Tournament
     * @param {TournamentsApiPutTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournament(
      requestParameters: TournamentsApiPutTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TournamentDetails> {
      return localVarFp
        .putTournament(
          requestParameters.id,
          requestParameters.tournamentRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for deleteTournament operation in TournamentsApi.
 * @export
 * @interface TournamentsApiDeleteTournamentRequest
 */
export interface TournamentsApiDeleteTournamentRequest {
  /**
   * ID of the Tournament
   * @type {number}
   * @memberof TournamentsApiDeleteTournament
   */
  readonly id: number;
}

/**
 * Request parameters for getTournament operation in TournamentsApi.
 * @export
 * @interface TournamentsApiGetTournamentRequest
 */
export interface TournamentsApiGetTournamentRequest {
  /**
   * ID of the Tournament
   * @type {number}
   * @memberof TournamentsApiGetTournament
   */
  readonly id: number;
}

/**
 * Request parameters for postTournament operation in TournamentsApi.
 * @export
 * @interface TournamentsApiPostTournamentRequest
 */
export interface TournamentsApiPostTournamentRequest {
  /**
   *
   * @type {TournamentPostRequest}
   * @memberof TournamentsApiPostTournament
   */
  readonly tournamentPostRequest?: TournamentPostRequest;
}

/**
 * Request parameters for putTournament operation in TournamentsApi.
 * @export
 * @interface TournamentsApiPutTournamentRequest
 */
export interface TournamentsApiPutTournamentRequest {
  /**
   * ID of the Tournament
   * @type {number}
   * @memberof TournamentsApiPutTournament
   */
  readonly id: number;

  /**
   *
   * @type {TournamentRequest}
   * @memberof TournamentsApiPutTournament
   */
  readonly tournamentRequest?: TournamentRequest;
}

/**
 * TournamentsApi - object-oriented interface
 * @export
 * @class TournamentsApi
 * @extends {BaseAPI}
 */
export class TournamentsApi extends BaseAPI {
  /**
   * Deletes a Tournament.
   * @summary Delete Tournament
   * @param {TournamentsApiDeleteTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public deleteTournament(
    requestParameters: TournamentsApiDeleteTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .deleteTournament(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a specific Tournament.
   * @summary Show Tournament
   * @param {TournamentsApiGetTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public getTournament(
    requestParameters: TournamentsApiGetTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .getTournament(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all Tournaments
   * @summary List Organization Tournaments
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public listTournaments(options?: RawAxiosRequestConfig) {
    return TournamentsApiFp(this.configuration)
      .listTournaments(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new Tournament.
   * @summary Create Tournament
   * @param {TournamentsApiPostTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public postTournament(
    requestParameters: TournamentsApiPostTournamentRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .postTournament(requestParameters.tournamentPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates a Tournament.
   * @summary Update Tournament
   * @param {TournamentsApiPutTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public putTournament(
    requestParameters: TournamentsApiPutTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .putTournament(
        requestParameters.id,
        requestParameters.tournamentRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
